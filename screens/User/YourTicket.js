import React, { useContext, useEffect, useState } from 'react';
import {
  View,
  Text,
  FlatList,
  TouchableOpacity,
  StyleSheet,
  Alert,
  ActivityIndicator,
} from 'react-native';
import { AuthContext } from '../../context/AuthContext';
import axios from 'axios';
import { API_URL } from '@env';
import TicketDetails from './TicketDetails'; // Import TicketDetails

const YourTicket = () => {
  const { userId } = useContext(AuthContext); // L·∫•y userId t·ª´ AuthContext
  const [tickets, setTickets] = useState([]); // D·ªØ li·ªáu v√©
  const [loading, setLoading] = useState(true); // Tr·∫°ng th√°i t·∫£i d·ªØ li·ªáu
  const [selectedTicket, setSelectedTicket] = useState(null); // Qu·∫£n l√Ω v√© ƒë∆∞·ª£c ch·ªçn

  // G·ªçi API ƒë·ªÉ l·∫•y th√¥ng tin v√©
  const fetchTickets = async () => {
    setLoading(true); // Hi·ªÉn th·ªã tr·∫°ng th√°i loading
    try {
      const response = await axios.get(`${API_URL}/tickets/${userId}`);
      setTickets(response.data); // L∆∞u d·ªØ li·ªáu v√© v√†o state
    } catch (error) {

      
      console.error(error);
      Alert.alert('L·ªói', 'Kh√¥ng th·ªÉ l·∫•y th√¥ng tin v√©!');
    } finally {
      setLoading(false); // T·∫Øt tr·∫°ng th√°i loading
    }
  };

  useEffect(() => {
    if (!userId) {
      Alert.alert('L·ªói', 'Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi d√πng!');
      return;
    }

    fetchTickets(); // L·∫•y danh s√°ch v√© ngay khi load
  }, [userId]);

  if (loading) {
    return (
      <View style={styles.container}>
        <ActivityIndicator size="large" color="#ff0000" />
      </View>
    );
  }

  if (selectedTicket) {
    // N·∫øu ƒë√£ ch·ªçn v√©, hi·ªÉn th·ªã m√†n h√¨nh chi ti·∫øt
    return (
      <TicketDetails
        ticket={selectedTicket}
        onCancel={() => setSelectedTicket(null)} // Quay l·∫°i danh s√°ch v√©
        onTicketUpdated={fetchTickets} // C·∫≠p nh·∫≠t danh s√°ch v√© sau khi h·ªßy
      />
    );
  }

  if (tickets.length === 0) {
    return (
      <View style={styles.container}>
        <Text style={styles.noTicketText}>B·∫°n ch∆∞a c√≥ v√© n√†o!</Text>
      </View>
    );
  }

  // Hi·ªÉn th·ªã th√¥ng tin v√©
  const renderTicket = ({ item }) => (
    <TouchableOpacity
      style={styles.ticketItem}
      onPress={() => setSelectedTicket(item)} // L∆∞u v√© ƒë∆∞·ª£c ch·ªçn
    >
      <View>
        <View style={styles.decorDotLeft}></View>
        <View style={styles.decorDotRight}></View>
        <Text style={styles.ticketInfo}>üé¨ Phim: {item.movie_title}</Text>
        <Text style={styles.ticketInfo}>üìç R·∫°p: {item.cinema_name}</Text>
        <Text style={styles.ticketInfo}>
          ‚è∞ Th·ªùi gian: {new Date(item.showtime).toLocaleString()}
        </Text>
        <Text style={styles.ticketInfo}>üí∫ Gh·∫ø: {item.seat_number}</Text>
        <Text style={styles.ticketInfo}>üíµ Gi√°: {item.price?.toLocaleString()} VNƒê</Text>
      </View>
    </TouchableOpacity>
  );

  if (loading) {
    return (
      <View style={styles.container}>
        <ActivityIndicator size="large" color="#ff0000" />
      </View>
    );
  }

  if (tickets.length === 0) {
    return (
      <View style={styles.container}>
        <Text style={styles.noTicketText}>B·∫°n ch∆∞a c√≥ v√© n√†o!</Text>
      </View>
    );
  }

  return (
    <View style={styles.container}>
      <FlatList
        data={tickets}
        keyExtractor={(item) => item.id} // S·ª≠ d·ª•ng ticket ID l√†m key
        renderItem={renderTicket}
      />
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 10,
    backgroundColor: '#1e1e1e',
  },
  ticketItem: {
    padding: 15,
    paddingLeft: 25,
    backgroundColor: '#ffe6a9',
    borderRadius: 8,
    marginBottom: 10,
    elevation: 3,
    position: 'relative',
  },
  ticketInfo: {
    color: '#000',
    fontSize: 15,
    marginBottom: 5,
  },
  decorDotLeft: {
    width: 20,
    height: 20,
    backgroundColor: '#1e1e1e',
    borderRadius: 100,
    position: 'absolute',
    left: -35,
    top: 28,
  },
  decorDotRight: {
    width: 20,
    height: 20,
    backgroundColor: '#1e1e1e',
    borderRadius: 100,
    position: 'absolute',
    right: -25,
    top: 28,
  },
  noTicketText: {
    color: '#fff',
    fontSize: 18,
    textAlign: 'center',
    marginTop: 20,
  },
});

export default YourTicket;
